// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod market_data {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum QuoteOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Quote<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Quote<'a> {
  type Inner = Quote<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Quote<'a> {
  pub const VT_SYMBOL: flatbuffers::VOffsetT = 4;
  pub const VT_BID_PRICE: flatbuffers::VOffsetT = 6;
  pub const VT_ASK_PRICE: flatbuffers::VOffsetT = 8;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Quote { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args QuoteArgs<'args>
  ) -> flatbuffers::WIPOffset<Quote<'bldr>> {
    let mut builder = QuoteBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.add_ask_price(args.ask_price);
    builder.add_bid_price(args.bid_price);
    if let Some(x) = args.symbol { builder.add_symbol(x); }
    builder.finish()
  }


  #[inline]
  pub fn symbol(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Quote::VT_SYMBOL, None)}
  }
  #[inline]
  pub fn bid_price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Quote::VT_BID_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ask_price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Quote::VT_ASK_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Quote::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Quote<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("symbol", Self::VT_SYMBOL, false)?
     .visit_field::<f64>("bid_price", Self::VT_BID_PRICE, false)?
     .visit_field::<f64>("ask_price", Self::VT_ASK_PRICE, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct QuoteArgs<'a> {
    pub symbol: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bid_price: f64,
    pub ask_price: f64,
    pub timestamp: u64,
}
impl<'a> Default for QuoteArgs<'a> {
  #[inline]
  fn default() -> Self {
    QuoteArgs {
      symbol: None,
      bid_price: 0.0,
      ask_price: 0.0,
      timestamp: 0,
    }
  }
}

pub struct QuoteBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> QuoteBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_symbol(&mut self, symbol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Quote::VT_SYMBOL, symbol);
  }
  #[inline]
  pub fn add_bid_price(&mut self, bid_price: f64) {
    self.fbb_.push_slot::<f64>(Quote::VT_BID_PRICE, bid_price, 0.0);
  }
  #[inline]
  pub fn add_ask_price(&mut self, ask_price: f64) {
    self.fbb_.push_slot::<f64>(Quote::VT_ASK_PRICE, ask_price, 0.0);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Quote::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> QuoteBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    QuoteBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Quote<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Quote<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Quote");
      ds.field("symbol", &self.symbol());
      ds.field("bid_price", &self.bid_price());
      ds.field("ask_price", &self.ask_price());
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
pub enum TradeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Trade<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Trade<'a> {
  type Inner = Trade<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Trade<'a> {
  pub const VT_SYMBOL: flatbuffers::VOffsetT = 4;
  pub const VT_PRICE: flatbuffers::VOffsetT = 6;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 8;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Trade { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TradeArgs<'args>
  ) -> flatbuffers::WIPOffset<Trade<'bldr>> {
    let mut builder = TradeBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    builder.add_volume(args.volume);
    builder.add_price(args.price);
    if let Some(x) = args.symbol { builder.add_symbol(x); }
    builder.finish()
  }


  #[inline]
  pub fn symbol(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Trade::VT_SYMBOL, None)}
  }
  #[inline]
  pub fn price(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Trade::VT_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn volume(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Trade::VT_VOLUME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Trade::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Trade<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("symbol", Self::VT_SYMBOL, false)?
     .visit_field::<f32>("price", Self::VT_PRICE, false)?
     .visit_field::<i32>("volume", Self::VT_VOLUME, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct TradeArgs<'a> {
    pub symbol: Option<flatbuffers::WIPOffset<&'a str>>,
    pub price: f32,
    pub volume: i32,
    pub timestamp: u64,
}
impl<'a> Default for TradeArgs<'a> {
  #[inline]
  fn default() -> Self {
    TradeArgs {
      symbol: None,
      price: 0.0,
      volume: 0,
      timestamp: 0,
    }
  }
}

pub struct TradeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TradeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_symbol(&mut self, symbol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trade::VT_SYMBOL, symbol);
  }
  #[inline]
  pub fn add_price(&mut self, price: f32) {
    self.fbb_.push_slot::<f32>(Trade::VT_PRICE, price, 0.0);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: i32) {
    self.fbb_.push_slot::<i32>(Trade::VT_VOLUME, volume, 0);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Trade::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TradeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TradeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Trade<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Trade<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Trade");
      ds.field("symbol", &self.symbol());
      ds.field("price", &self.price());
      ds.field("volume", &self.volume());
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
pub enum MarketEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MarketEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MarketEvent<'a> {
  type Inner = MarketEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MarketEvent<'a> {
  pub const VT_EVENT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_QUOTE: flatbuffers::VOffsetT = 6;
  pub const VT_TRADE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MarketEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MarketEventArgs<'args>
  ) -> flatbuffers::WIPOffset<MarketEvent<'bldr>> {
    let mut builder = MarketEventBuilder::new(_fbb);
    if let Some(x) = args.trade { builder.add_trade(x); }
    if let Some(x) = args.quote { builder.add_quote(x); }
    if let Some(x) = args.event_type { builder.add_event_type(x); }
    builder.finish()
  }


  #[inline]
  pub fn event_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MarketEvent::VT_EVENT_TYPE, None)}
  }
  #[inline]
  pub fn quote(&self) -> Option<Quote<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Quote>>(MarketEvent::VT_QUOTE, None)}
  }
  #[inline]
  pub fn trade(&self) -> Option<Trade<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Trade>>(MarketEvent::VT_TRADE, None)}
  }
}

impl flatbuffers::Verifiable for MarketEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("event_type", Self::VT_EVENT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Quote>>("quote", Self::VT_QUOTE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Trade>>("trade", Self::VT_TRADE, false)?
     .finish();
    Ok(())
  }
}
pub struct MarketEventArgs<'a> {
    pub event_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub quote: Option<flatbuffers::WIPOffset<Quote<'a>>>,
    pub trade: Option<flatbuffers::WIPOffset<Trade<'a>>>,
}
impl<'a> Default for MarketEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    MarketEventArgs {
      event_type: None,
      quote: None,
      trade: None,
    }
  }
}

pub struct MarketEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MarketEventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_event_type(&mut self, event_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MarketEvent::VT_EVENT_TYPE, event_type);
  }
  #[inline]
  pub fn add_quote(&mut self, quote: flatbuffers::WIPOffset<Quote<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Quote>>(MarketEvent::VT_QUOTE, quote);
  }
  #[inline]
  pub fn add_trade(&mut self, trade: flatbuffers::WIPOffset<Trade<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Trade>>(MarketEvent::VT_TRADE, trade);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MarketEventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MarketEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MarketEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MarketEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MarketEvent");
      ds.field("event_type", &self.event_type());
      ds.field("quote", &self.quote());
      ds.field("trade", &self.trade());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MarketEvent`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_market_event_unchecked`.
pub fn root_as_market_event(buf: &[u8]) -> Result<MarketEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MarketEvent>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MarketEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_market_event_unchecked`.
pub fn size_prefixed_root_as_market_event(buf: &[u8]) -> Result<MarketEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MarketEvent>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MarketEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_market_event_unchecked`.
pub fn root_as_market_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MarketEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MarketEvent<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MarketEvent` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_market_event_unchecked`.
pub fn size_prefixed_root_as_market_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MarketEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MarketEvent<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MarketEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MarketEvent`.
pub unsafe fn root_as_market_event_unchecked(buf: &[u8]) -> MarketEvent {
  flatbuffers::root_unchecked::<MarketEvent>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MarketEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MarketEvent`.
pub unsafe fn size_prefixed_root_as_market_event_unchecked(buf: &[u8]) -> MarketEvent {
  flatbuffers::size_prefixed_root_unchecked::<MarketEvent>(buf)
}
#[inline]
pub fn finish_market_event_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MarketEvent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_market_event_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MarketEvent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod MarketData

